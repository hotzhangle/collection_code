" =========================================================================
" Last Change: 2017年01月06日 15时13分
" Version:2070107
" =========================================================================

set nocompatible " 关闭 vi 兼容模式
filetype off
syntax on "	auto syntax on
syntax enable "open syntax highlight
"curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
"    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim  "about https://github.com/junegunn
"source ~/.vim/vim-plug.vim 
"=======for add plugin youcompleteme=========
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
Bundle 'gmarik/vundle'
Bundle 'OnSyntaxChange'
Bundle 'tpope/vim-fugitive'
"speed motion in vim
Bundle 'Lokaltog/vim-easymotion'
" rails develop
Bundle 'tpope/vim-rails.git'
"html coding
Bundle 'rstacruz/sparkup',{'rtp':'vim/'}
Bundle 'L9'
"for a better find ctags
Bundle 'FuzzyFinder'
"more quickly to select match symbol block
Bundle 'gcmt/wildfire.vim'
Bundle 'Mizuchi/STL-Syntax.git'
"Alignment line
Bundle 'nathanaelkane/vim-indent-guides.git'
Bundle 'yegappan/grep.git'
"See :help Ack for more imformation,the following three plugin is used to search key words in project, however I can't use it yet now
Bundle 'mileszs/ack.vim'
Bundle 'dyng/ctrlsf.vim'
Bundle 'kien/ctrlp.vim'
"auto complete match symbol
Bundle 'AutoClose'
"for html coding
Bundle 'ZenCoding.vim'
Bundle 'matchit.zip'
Bundle '_jsbeautify'
Bundle 'EasyMotion'
Bundle 'FencView.vim'
Bundle 'The-NERD-tree'
Bundle 'The-NERD-Commenter'
Bundle 'mhinz/vim-signify'
Bundle 'python-mode/python-mode'
Bundle 'scrooloose/nerdcommenter'
Bundle 'jlanzarotta/bufexplorer'
Bundle 'MarcWeber/vim-addon-mw-utils'
Bundle 'tomtom/tlib_vim'
Bundle 'SirVer/ultisnips'
Bundle 'garbas/vim-snipmate'
Bundle 'honza/vim-snippets'
Bundle 'terryma/vim-multiple-cursors'
Bundle "tomasr/molokai"                                                                                                                                                                                                         
Bundle "altercation/vim-colors-solarized"                                               
Bundle "fugalh/desert.vim"                                                              
Bundle "endel/vim-github-colorscheme" 
Bundle 'bronson/vim-trailing-whitespace'
"auto complete matches begin
Bundle 'Raimondi/delimitMate'
"auto complete matches end
filetype plugin indent on "require
Bundle 'Valloric/YouCompleteMe'
" To ignore plugin indent changes, instead use:filetype plugin on Brief help
" :PluginList          - list configured plugins
" :PluginInstall(!)    - install (update) plugins
" :PluginSearch(!) foo - search (or refresh
" cache first) for foo
" :PluginClean(!)      - confirm (or auto-approve) removal of unused plugins
" see :h vundle for more details or wiki for FAQ  NOTE: comments after Plugin commands are not allowed  Put your stuff after this line
let g:ycm_key_list_select_completion = ['<c-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<c-p>', '<Up>']
let g:ycm_confirm_extra_conf=0 "关闭加载.ycm_extra_conf.py提示
let g:ycm_min_num_of_chars_for_completion=2 " 从第2个键入字符就开始罗列匹配项
let g:ycm_cache_omnifunc=0  " 禁止缓存匹配项,每次都重新生成匹配项
let g:ycm_seed_identifiers_with_syntax=1    " 语法关键字补全
let g:ycm_complete_in_comments = 1 "  在注释输入中也能补全
let g:ycm_complete_in_strings = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 0 "注释和字符串中的文字也会被收入补全
let g:ycm_global_ycm_extra_conf='~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py'
"=======for add plugin youcompleteme=========
" 随 vim 自启动
let g:indent_guides_enable_on_vim_startup=1
" 从第二层开始可视化显示缩进
let g:indent_guides_start_level=2
" 色块宽度
let g:indent_guides_guide_size=1
" 快捷键 i 开/关缩进可视化
"easymotion map setting
let g:EasyMotion_smartcase = 1
let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
let g:UltiSnipsExpandTrigger="<C-S-j>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>" " If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
" ln -s ./bundle/vim-snippets/UltiSnips ~/.vim/UltiSnips
" ln -s ./bundle/vim-snippets/snippets/ ~/.vim/snippets
let g:UltiSnipsSnippetsDir = '~/.vim/bundle/vim-snippets/'
let g:UltiSnipsSnippetDirectories=['UltiSnips','snippets'] "这个数组里的每一项都必须在 runtimepath 其中的一项之下
"-------------------------------------------------------------------------------------------------
"terryma/vim-multiple-cursors
let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'
let g:multi_cursor_start_key='<F7>'
let g:wildfire_objects = ["i'",'i"',"i)","i]","i}","ip","it"]
let g:ctrlsf_ackprg = 'ack'
"-------------------------------------------------------------------------------------------------
"set undofile
"Set to auto read when a file is changed from the outside
if exists("&autoread")
	set autoread " auto reload file
endif
"Have the mouse enable all the time:
set mouse=v


set t_Co=256 "set terminal support 256 colors
set background=light
colorscheme molokai " 设定配色方案
" colorscheme morning
" colorscheme solarized
"colorscheme desert
set number " 显示行号
set relativenumber "设置相对行号
set showcmd "命令行显示输入的命令
set showmode "命令行显示vim当前模式
set ruler " Always show current position
set cmdheight=2 " The commandbar is 2 high
set cursorline " 突出显示当前行
set cursorcolumn "突出显示当前列
set colorcolumn=100
set so=7 " Set 7 lines to the curors-when moving vertical
set shiftwidth=4 " 设定\<\<和\>\>命令移动时的宽度为 4
set softtabstop=4 " 使得按退格键时可以一次删掉 4 个空格
set tabstop=4 " 设定 tab 长度为 4
set expandtab=1 "用空格替代tab
set nobackup " 覆盖文件时不备份
set nowb " may means no white blank
set guioptions=aAce "hide toolbar and scrollbar
setlocal noswapfile " maybe means no need to generate swap file
setlocal noundofile "forbiden to generate temp untracked file.
"为了更方便的发挥fzf的查找文件功能，停止这一设置
"set autochdir " 自动切换当前目录为当前文件所在的目录 
set autowrite "设置自动写入
set backupcopy=yes " 设置备份时的行为为覆盖
set ignorecase "ignore case in searches
set smartcase " 搜索时忽略大小写，但在有一个或以上大写字母时仍保持对大小写敏感
set nowrapscan " 禁止在搜索到文件两端时重新搜索
set incsearch " 输入搜索内容时就显示搜索结果
set hlsearch " 搜索时高亮显示被找到的文本
set noerrorbells " 关闭错误信息响铃
set novisualbell " 关闭使用可视响铃代替呼叫
set sessionoptions+=unix,slash "在ms-windows中和linux中都可以使用vim会话
set t_vb= " 置空错误铃声的终端代码
set showmatch " 插入括号时，短暂地跳转到匹配的对应括号
set matchtime=2 " 短暂跳转到匹配括号的时间
set magic " 设置魔术
set hidden " 允许在有未保存的修改时切换缓冲区，此时的修改由 vim 负责保存
set guioptions-=T " 隐藏工具栏
set guioptions-=m " 隐藏菜单栏
set report=0 "通过commands命令，告诉我们文件哪一行被改变过
set smartindent " 开启新行时使用智能自动缩进
set autoindent "开启换行自动缩进
set backspace=indent,eol,start " 不设定在插入状态无法用退格键和 Delete 键删除回车符
set cmdheight=1 " 设定命令行的行数为 1
set laststatus=2 " 显示状态栏 (默认值为 1, 无法显示状态栏)
"set statusline=\ %<%F[%1*%M%*%n%R%H]%=\ %y\ %0(%{&fileformat}\ %{&encoding}\ %c:%l/%L%)\  ""设置在状态行显示的信息
set statusline=%<%1*[B-%n]%* " TOT is an abbreviation for total
set statusline+=%2*[TOT:%{Buf_total_num()}]%*
set statusline+=%3*\ %{File_size(@%)}\ %*
set statusline+=%4*\ %F\ %*
set statusline+=%5*『\ %{exists('g:loaded_ale')?ALEGetStatusLine():''}』%{exists('g:loaded_fugitive')?fugitive#statusline():''}%*
set statusline+=%6*\ %m%r%y\ %*
set statusline+=%=%7*\ %{&ff}\ \|\ %{\"\".(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\").\"\ \|\"}\ %-14.(%l:%c%V%)%*
set statusline+=%8*\ %P\ %*
" default bg for statusline is 236 in space-vim-dark
hi User1 cterm=bold ctermfg=232 ctermbg=179
hi User2 cterm=None ctermfg=214 ctermbg=242
hi User3 cterm=None ctermfg=251 ctermbg=240
hi User4 cterm=bold ctermfg=169 ctermbg=239
hi User5 cterm=None ctermfg=208 ctermbg=238
hi User6 cterm=None ctermfg=246 ctermbg=237
hi User7 cterm=None ctermfg=250 ctermbg=238
hi User8 cterm=None ctermfg=249 ctermbg=240
set foldenable " 开始折叠
set foldmethod=syntax " 设置语法折叠
set foldcolumn=0 " 设置折叠区域的宽度
au BufRead,BufNewFile \* setfiletype txt " 高亮显示普通txt文件
setlocal foldlevel=1 " 设置折叠层数为1
set viminfo+=! " save global viraberant
"set foldclose=all " 设置为自动关闭折叠
command W w !sudo tee % > /dev/null  " :W sudo saves the file (useful for handling the permission-denied)
" --------------mapping-----------------------------
"Set mapleader set mapleader must be ahead of all mapping action
let mapleader = ";"
let g:mapleader = ";"
if has("win32")
    nmap <leader>ss :w!<cr>:source $VIM/_vimrc<cr>
    nmap <leader>ee :e! $VIM/_vimrc<cr>
elseif has('unix')
    nmap <leader>ss :w!<cr>:source ~/.vimrc<cr>
    "Fast editing of .vimrc
    nmap <leader>ee :e! ~/.vimrc<cr>
endi
nmap <silent> <Leader>i <Plug>IndentGuidesToggle
nmap <leader>s :,s///gc
nmap <leader>p : set paste<CR>
nmap <leader>pp :set nopaste<CR>
map <silent> <leader><cr> :noh<cr>
map <silent> <leader>nnu :set nonumber norelativenumber<cr>                                                                                                                                                                   
map <silent> <leader>nu :set number relativenumber<cr>
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap kj <Esc>
" snippets expand key
imap <silent> <C-e> <Plug>(neocomplcache_snippets_expand)
smap <silent> <C-e> <Plug>(neocomplcache_snippets_expand)

nnoremap <leader><space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>
nnoremap <leader>jd :YcmCompleter GoToDeclaration<CR>
nnoremap <Leader>sp :CtrlSF<CR>
" 只能是 #include 或已打开的文件
nnoremap <leader>je :YcmCompleter GoToDefinition<CR>
vnoremap <silent> * :call VisualSelection('f')<CR>
vnoremap <silent> # :call VisualSelection('b')<CR>

" Tab操作快捷方式!
nnoremap <C-TAB> :tabnext<CR>
nnoremap <C-S-TAB> :tabprev<CR>

"关于tab的快捷键
 map tn :tabnext<cr>
 map tp :tabprevious<cr>
 map td :tabnew .<cr>
 map te :tabedit
 map tc :tabclose<cr>

" F6 BufExplorer Buffers操作快捷方式!
map <F6> :BufExplorer<CR>
nnoremap <C-RETURN> :bnext<CR>
nnoremap <C-S-RETURN> :bprevious<CR>
"-----------------------------------------------------------------
" F3 NERDTree 切换
map <F3> :NERDTreeToggle<CR>
imap <F3> <ESC>:NERDTreeToggle<CR>
" plugin - matchit.vim 对%命令进行扩展使得能在嵌套标签和语句之间跳转" % 正向匹配 g% 反向匹配
"窗口分割时,进行切换的按键热键需要连接两次,比如从下方窗口移动"光标到上方窗口,需要<c-w><c-w>k,非常麻烦,现在重映射为<c-k>,切换的"时候会变得非常方便.
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <silent><F4> :TlistToggle<CR>
"一些不错的映射转换语法（如果在一个文件中混合了不同语言时有用）
nnoremap <leader>0 :set filetype=java<CR>
nnoremap <leader>1 :set filetype=xhtml<CR>
nnoremap <leader>2 :set filetype=css<CR>
nnoremap <leader>3 :set filetype=javascript<CR>
nnoremap <leader>4 :set filetype=php<CR>

" 选中状态下 Ctrl+c 复制
vmap <C-c> "+y
map <leader>da :DoxAuthor<CR>
map <leader>df :Dox<CR>
map <leader>db :DoxBlock<CR>
map <leader>dc a /* */<LEFT><LEFT><LEFT>
set fileformats=unix,dos,mac
" nmap <leader>fd :se fileformat=dos<CR>
" nmap <leader>fu :se fileformat=unix<CR>

" use Ctrl+[l|n|p|cc] to list|next|previous|jump to count the result
 map <C-x>l <ESC>:cl<CR>
 map <C-x>n <ESC>:cn<CR>
 map <C-x>p <ESC>:cp<CR>
 map <C-x>c <ESC>:cc<CR>
 "[% 定位块首 ]% 定位块尾
"EasyMotion mapping setting
map <Leader><leader>h <Plug>(easymotion-linebackward)
map <Leader><Leader>j <Plug>(easymotion-j)
map <Leader><Leader>k <Plug>(easymotion-k)
map <Leader><leader>l <Plug>(easymotion-lineforward)
map <Leader><leader>. <Plug>(easymotion-repeat)"
"wildfire.vim for select match symbol
map <SPACE> <Plug>(wildfire-fuel)
vmap <S-SPACE> <Plug>(wildfire-water)
" --------------mapping-----------------------------

"Enable filetype plugin
if has("eval") && v:version>=600
	filetype plugin on
	filetype indent on
endif
set iskeyword+=_,$,@,%,#,- " keyword chararacter will not split
highlight WhitespaceEOL ctermbg=red guibg=red
match WhitespaceEOL /\s\+$/
highlight StatusLine guifg=SlateBlue guibg=Yellow
highlight StatusLineNC guifg=Gray guibg=White

" Signify ------------------------------
" this first setting decides in which order try to guess your current vcs
" UPDATE it to reflect your preferences, it will speed up opening files
let g:signify_vcs_list = [ 'git', 'hg' ]
" mappings to jump to changed blocks
nmap <leader>sn <plug>(signify-next-hunk)
nmap <leader>sp <plug>(signify-prev-hunk)
" nicer colors
highlight DiffAdd           cterm=bold ctermbg=none ctermfg=119
highlight DiffDelete        cterm=bold ctermbg=none ctermfg=167
highlight DiffChange        cterm=bold ctermbg=none ctermfg=227
highlight SignifySignAdd    cterm=bold ctermbg=237  ctermfg=119
highlight SignifySignDelete cterm=bold ctermbg=237  ctermfg=167
highlight SignifySignChange cterm=bold ctermbg=237  ctermfg=227
"highlight cursor                                                                       
highlight CursorLine   cterm=NONE ctermbg=black ctermfg=green guibg=NONE guifg=NONE                                                                                                                                             
highlight CursorColumn cterm=NONE ctermbg=black ctermfg=green guibg=NONE guifg=NONE

"Visual mode pressing * or # searches for the current selection Super useful!From an idea by Michael Naumann " return OS type, eg: windows, or linux, mac, et.st..
function! MySys()
if has("win16") || has("win32") || has("win64") || has("win95")
return "windows"
elseif has("unix")
return "linux"
endif
endfunction

function! Buf_total_num()
	return len(filter(range(1,bufnr('$')),'buflisted(v:val)'))
endfunction

function! File_size(f)
	let l:size = getfsize(expand(a:f))
	if l:size == 0 || l:size == -1 || l:size == -2
		return ''
	endif
	if l:size < 1024
		return l:size.' bytes'
	elseif l:size < 1024*1024
		return printf('%.1f',l:size/1024.0).'k'
	elseif l:size < 1024*1024*1024
		return printf('%.1f',l:size/1024.0/1024.0).'m'
	else
		return printf('%.1f',l:size/1024.0/1024.0/1024.0).'g'
	endif
endfunction

" 用户目录变量$VIMFILES
if MySys() == "windows"
let $VIMFILES = $VIM.'/vimfiles'
elseif MySys() == "linux"
let $VIMFILES = $HOME.'/.vim'
endif

" 设定doc文档目录
let helptags=$VIMFILES.'/doc'

" 设置字体 以及中文支持
if has("win32")
set guifont=Inconsolata:h12:cANSI
endif

" 配置多语言环境
if has("multi_byte")
" UTF-8 编码
set encoding=utf-8
set termencoding=utf-8
set formatoptions+=mM
set fenc=utf-8
set fencs=utf-8,gbk
set clipboard+=unnamed

if v:lang =~? '^\(zh\)\|\(ja\)\|\(ko\)'
set ambiwidth=double
endif

if has("win32")
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim
language messages zh_CN.utf-8
endif
else
echoerr "Sorry, this version of (g)vim was not compiled with +multi_byte"
endif

" 让 Tohtml 产生有 CSS 语法的 html " syntax/2html.vim，可以用:runtime! syntax/2html.vim
let html_use_css=1

"hilight function name
autocmd BufNewFile,BufRead * :syntax match cfunctions "\<[a-zA-Z_][a-zA-Z_0-9]*\>[^()]*)("me=e-2
autocmd BufNewFile,BufRead * :syntax match cfunctions "\<[a-zA-Z_][a-zA-Z_0-9]*\>\s*("me=e-1
hi cfunctions ctermfg=100
" Python 文件的一般设置，比如不要 tab 等
autocmd FileType python set tabstop=4 shiftwidth=4 expandtab
autocmd FileType python map <F12> :!python %<CR>

" 打开javascript折叠
let b:javascript_fold=1
" 打开javascript对dom、html和css的支持
let javascript_enable_domhtmlcss=1

"设置字典 ~/.vim/dict/文件的路径
autocmd filetype javascript set dictionary=$VIMFILES/dict/javascript.dict
autocmd filetype css set dictionary=$VIMFILES/dict/css.dict
autocmd filetype php set dictionary=$VIMFILES/dict/php.dict
" 设置每行的宽度
autocmd FileType * setlocal textwidth=85 formatoptions+=t
"-----------------------------------------------------------------
" plugin - bufexplorer.vim Buffers切换
let g:bufExplorerDefaultHelp=0 " Do not show default help.
let g:bufExplorerShowRelativePath=1 " Show relative paths.
let g:bufExplorerSortBy='mru' " Sort by most recently used.
let g:bufExplorerSplitRight=0 " Split left.
let g:bufExplorerSplitVertical=1 " Split vertically.
let g:bufExplorerSplitVertSize = 30 " Split width
let g:bufExplorerUseCurrentWindow=1 " Open in new window.
autocmd BufWinEnter \[Buf\ List\] setl nonumber"
"-----------------------------------------------------------------
" plugin - taglist.vim 查看函数列表，需要ctags程序 F4 打开隐藏taglist窗口
"-----------------------------------------------------------------
if MySys() == "windows" " 设定windows系统中ctags程序的位置
let Tlist_Ctags_Cmd = '"'.$VIMRUNTIME.'/ctags.exe"'
elseif MySys() == "linux" " 设定windows系统中ctags程序的位置
let Tlist_Ctags_Cmd = '/usr/bin/ctags'
endif
let Tlist_Show_One_File = 1 " 不同时显示多个文件的tag，只显示当前文件的
let Tlist_Exit_OnlyWindow = 1 " 如果taglist窗口是最后一个窗口，则退出vim
let Tlist_Use_Right_Window = 1 " 在右侧窗口中显示taglist窗口
let Tlist_File_Fold_Auto_Close=1 " 自动折叠当前非编辑文件的方法列表
let Tlist_Auto_Open = 0
let Tlist_Auto_Update = 1
let Tlist_Hightlight_Tag_On_BufEnter = 1
let Tlist_Enable_Fold_Column = 0
let Tlist_Process_File_Always = 1
let Tlist_Display_Prototype = 0
let Tlist_Compact_Format = 1
"-----------------------------------------------------------------
" plugin - NERD_tree.vim 以树状方式浏览系统中的文件和目录
" press <F3> to enable NERD_tree,then you can press key '?' to referece more " key help
" [count],cc/cu 光标以下count行逐行添加/取消注释(7,cc/cu)"[count],cm块注释(7,cm)" ,cA 在行尾插入 /* */,并且进入插入模式。" 注：count参数可选，无则默认为选中行或当前行
"-----------------------------------------------------------------
let NERDSpaceDelims=1 " 让注释符与语句之间留一个空格
let NERDCompactSexyComs=1 " 多行注释时样子更好看
"-----------------------------------------------------------------
" plugin - DoxygenToolkit.vim 由注释生成文档，并且能够快速生成函数标准注释
"-----------------------------------------------------------------
let g:DoxygenToolkit_authorName="Asins - asinsimple AT gmail DOT com"
let g:DoxygenToolkit_briefTag_funcName="yes"
"-----------------------------------------------------------------
" plugin – ZenCoding.vim 很酷的插件，HTML代码生成
"-----------------------------------------------------------------
" plugin – checksyntax.vim JavaScript常见语法错误检查" 默认快捷方式为 F5
"-----------------------------------------------------------------
let g:checksyntax_auto = 0 " 不自动检查
"-----------------------------------------------------------------
" plugin - NeoComplCache.vim 自动补全插件
"-----------------------------------------------------------------
let g:AutoComplPop_NotEnableAtStartup = 1
let g:NeoComplCache_EnableAtStartup = 1
let g:NeoComplCache_SmartCase = 1
let g:NeoComplCache_TagsAutoUpdate = 1
let g:NeoComplCache_EnableInfo = 1
let g:NeoComplCache_EnableCamelCaseCompletion = 1
let g:NeoComplCache_MinSyntaxLength = 3
let g:NeoComplCache_EnableSkipCompletion = 1
let g:NeoComplCache_SkipInputTime = '0.5'
let g:NeoComplCache_SnippetsDir = $VIMFILES.'/snippets'
" <TAB> completion.
"-----------------------------------------------------------------
" plugin - vcscommand.vim 对%命令进行扩展使得能在嵌套标签和语句之间跳转
" SVN/git管理工具
"-----------------------------------------------------------------
" plugin – a.vim
"-----------------------------------------------------------------
" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif
"-----------------------------------------------------------------
function! g:UltiSnips_Complete()
  call UltiSnips#ExpandSnippet()
  if g:ulti_expand_res == 0
    if pumvisible()
      return "\<C-n>"
    else
      call UltiSnips#JumpForwards()
      if g:ulti_jump_forwards_res == 0
        return "\<TAB>"
      endif
    endif
  endif
  return ""
endfunction

function! g:UltiSnips_Reverse()
  call UltiSnips#JumpBackwards()
  if g:ulti_jump_backwards_res == 0
    return "\<C-P>"
  endif

  return ""
endfunction


if !exists("g:UltiSnipsJumpForwardTrigger")
  let g:UltiSnipsJumpForwardTrigger = "<tab>"
endif
if !exists("g:UltiSnipsJumpBackwardTrigger")
  let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
endif

au InsertEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger     . " <C-R>=g:UltiSnips_Complete()<cr>"
au InsertEnter * exec "inoremap <silent> " .     g:UltiSnipsJumpBackwardTrigger . " <C-R>=g:UltiSnips_Reverse()<cr>"
"--------------------for plugin delimitMate---------------------------------------------
au FileType python let b:delimitMate_nesting_quotes = ['"''"']
"sometimes need to shutdown auto complete for example in python mode.
au FileType python let b:delimitMate_autoclose = 0
"--------------------for plugin delimitMate---------------------------------------------
"-----------------------------------------------------------------
"对搜索的设置
map ft :call Search_Word()<CR>:copen<CR>
function Search_Word()
let w = expand("<cword>") " 在当前光标位置抓词
execute "vimgrep " . w . " %"
endfunction
"---------------------------------------------------------------------------------------
" Go to last file(s) if invoked without arguments.
if has("gui_running")                                                                                                                                                                                                           
    autocmd VimLeave * nested if (!isdirectory($HOME . "/.vim")) |                                     
                \ call mkdir($HOME . "/.vim") |                                                        
                \ endif |                                                                              
                \ execute "mksession! " . $HOME . "/.vim/SessionGui.vim"                               
    autocmd VimEnter * nested if argc() == 0 && filereadable($HOME . "/.vim/SessionGui.vim") |
    		\ execute "source " . $HOME . "/.vim/SessionGui.vim"
else                                                                                                   
    autocmd VimLeave * nested if (!isdirectory($HOME . "/.vim")) |                                     
                \ call mkdir($HOME . "/.vim") |                                                        
                \ endif |                                                                              
                \ execute "mksession! " . $HOME . "/.vim/Session.vim"                                  
    autocmd VimEnter * nested if argc() == 0 && filereadable($HOME . "/.vim/Session.vim") |
    		\ execute "source " . $HOME . "/.vim/Session.vim"
endif  
"###################    set comment start  #########################                                   
func SetComment()                                                                                      
    call append(line(".")  , '// Techain modify for ID by zhangle at '.strftime("%Y-%m-%d %H:%M:%S").' start.')
    call append(line(".")+1  , '// Techain modify for ID by zhangle at '.strftime("%Y-%m-%d %H:%M:%S").' end.')
endfunc
nmap <leader><SPACE> :%s/ID//gc
map <F11> : call SetComment()<CR>j<ESC>                                                                
"###################    set comment end   ##########################
